/*
	Returns a list of server principals (logins, et al) and any
	permissions that have explicitly been granted or denied.

	01/06/2020	Updated to support versions < SQL Server 2012.
*/
BEGIN
DECLARE @MajVer INT;
SET @MajVer = CAST(PARSENAME(CAST(SERVERPROPERTY('ProductVersion') AS VARCHAR(MAX)), 4) AS INT);

IF OBJECT_ID('tempdb.dbo.#FixedServerRoles') IS NOT NULL DROP TABLE dbo.#FixedServerRoles;
CREATE TABLE #FixedServerRoles (
	ServerRole SYSNAME,
	[Description] SYSNAME
)

IF @MajVer <= 10
BEGIN
	EXEC ('INSERT INTO #FixedServerRoles EXEC sp_helpsrvrole;');
END
ELSE
BEGIN
	EXEC ('INSERT INTO #FixedServerRoles 
	SELECT prin.name AS PrincipalName, prin.type_desc
	FROM sys.server_principals AS prin
	WHERE is_fixed_role = 1;');
END

SELECT 
	
	prin.name AS [Server Principal], 
	prin.type_desc [Server Principal Type], 
	COALESCE(perm.state_desc + ' ' + perm.permission_name, '') AS [Server Permission],
	COALESCE(perm.class_desc, '')  permission_class,
	CASE
		WHEN perm.class_desc = 'SERVER' THEN ''
		WHEN perm.class_desc = 'SERVER_PRINCIPAL' THEN NULL	--?
		WHEN perm.class_desc = 'ENDPOINT' THEN ( SELECT e.protocol_desc COLLATE SQL_Latin1_General_CP1_CI_AS FROM sys.endpoints e WHERE e.endpoint_id = perm.major_id ) 
		ELSE ''
	END AS securable
FROM sys.server_principals AS prin
LEFT JOIN sys.server_permissions AS perm
	ON prin.principal_id = perm.grantee_principal_id
WHERE prin.name NOT IN (SELECT fsr.ServerRole FROM #FixedServerRoles fsr)
ORDER BY prin.name, prin.type_desc;
END
GO
